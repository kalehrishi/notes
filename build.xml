<?xml version="1.0" encoding="UTF-8"?>
<project name="Notes" default="build" xmlns:flyway="antlib:org.flywaydb.ant">
 <target name="build" depends="copy-config,replace-config-dbname,migrate-db,prepare,composer,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit,phpdox,Zip"/>

 <target name="clean" unless="clean.done" description="Cleanup build artifacts">
  <delete dir="${basedir}/build/api"/>
  <delete dir="${basedir}/build/coverage"/>
  <delete dir="${basedir}/build/logs"/>
  <delete dir="${basedir}/build/pdepend"/>
  <delete dir="${basedir}/build/phpdox"/>
  <delete file="${basedir}/composer.lock"/>
  <delete dir="${basedir}/vendor"/>
  <delete file="${basedir}/app/Config/config.json"/>
  <delete file="${basedir}/project.zip"/>
  
  <property name="clean.done" value="true"/>
 </target>
 
 <target name="copy-config" depends="clean">
  <property environment="env"/>
  <condition property="env.APP_ENV" value="${env.APP_ENV}" else="dev">
   <isset property="env.APP_ENV" />
  </condition>
  <property name="env.APP_ENV" value="dev"/>
  <echo message="Configuring app environment to ${env.APP_ENV}."/>
  <copy file="${basedir}/app/Config/config_${env.APP_ENV}.json" tofile="${basedir}/app/Config/config.json"/>
  
 </target>
 
 <target name="replace-config-dbname" depends="copy-config">
  <property environment="env"/>
  <condition property="env.GIT_BRANCH" value="${env.GIT_BRANCH}" else="master">
   <isset property="env.GIT_BRANCH" />
  </condition>
  <property name="" value="master"/>
  <echo message="Using database name notes-${env.GIT_BRANCH} for this build."/>
  <replace file="${basedir}/app/Config/config.json" token="@GIT_BRANCH" value="${env.GIT_BRANCH}"/>
 </target>

 <target name="migrate-db" depends="replace-config-dbname" unless="migrate-db.done" description="Cleanup db and build from scratch">
       <taskdef uri="antlib:org.flywaydb.ant" resource="org/flywaydb/ant/antlib.xml">
           <classpath>
               <pathelement location="${basedir}/build/tools/flyway-ant-3.1/flyway-core-3.1.jar"/>
               <pathelement location="${basedir}/build/tools/flyway-ant-3.1/flyway-ant-3.1.jar"/>
           </classpath>
       </taskdef>
 
       <path id="flyway.classpath">
           <fileset dir="${basedir}/build/tools/flyway-ant-3.1" includes="mysql-connector-java-5.1.34-bin.jar"/>
       </path>
       <property name="flyway.locations" value="filesystem:${basedir}/database/migrate"/>
       <property name="flyway.user" value="developer"/>
       <property name="flyway.password" value="test123"/>
       <property name="flyway.schemas" value="notes-${env.GIT_BRANCH}"/>
       <property name="flyway.url" value="jdbc:mysql://localhost:3306"/>
       <flyway:clean/>
       <flyway:migrate/>
 </target>

 <target name="composer" depends="clean" unless="composer.noupdate" description="Run composer install">
  <exec executable="php">
   <arg value="${basedir}/build/tools/composer.phar"/>
   <arg value="install"/>
   <arg value="--profile"/>
  </exec>
 </target>

 <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
  <mkdir dir="${basedir}/build/api"/>
  <mkdir dir="${basedir}/build/coverage"/>
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/pdepend"/>
  <property name="prepare.done" value="true"/>
 </target>

 <target name="lint" depends="clean">
  <apply executable="php" failonerror="true">
   <arg value="-l" />

   <fileset dir="${basedir}/app">
    <include name="**/*.php" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/tests">
    <include name="**/*.php" />
    <modified />
   </fileset>
  </apply>
 </target>

 <target name="phploc" description="Measure project size using PHPLOC">
  <exec executable="${basedir}/build/tools/phploc.phar">
   <arg value="--count-tests" />
   <arg path="${basedir}/app" />
   <arg path="${basedir}/tests" />
  </exec>
 </target>

 <target name="phploc-ci" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format">
  <exec executable="${basedir}/build/tools/phploc.phar">
   <arg value="--count-tests" />
   <arg value="--log-csv" />
   <arg path="${basedir}/build/logs/phploc.csv" />
   <arg value="--log-xml" />
   <arg path="${basedir}/build/logs/phploc.xml" />
   <arg path="${basedir}/app" />
   <arg path="${basedir}/tests" />
  </exec>
 </target>

 <target name="pdepend" depends="prepare" description="Calculate software metrics using PHP_Depend">
  <exec executable="${basedir}/build/tools/pdepend.phar">
   <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phpmd" description="Perform project mess detection using PHPMD and print result in text format">
  <exec executable="${basedir}/build/tools/phpmd.phar">
   <arg path="${basedir}/app" />
   <arg value="text" />
   <arg path="${basedir}/build/phpmd.xml" />
  </exec>
 </target>

 <target name="phpmd-ci" depends="prepare" description="Perform project mess detection using PHPMD and log result in XML format">
  <exec executable="${basedir}/build/tools/phpmd.phar">
   <arg path="${basedir}/app" />
   <arg value="xml" />
   <arg path="${basedir}/build/phpmd.xml" />
   <arg value="--reportfile" />
   <arg path="${basedir}/build/logs/pmd.xml" />
  </exec>
 </target>

 <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print result in text format">
  <exec executable="${basedir}/build/tools/phpcs.phar">
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg value="--ignore=autoload.php" />
   <arg path="${basedir}/app" />
   <arg path="${basedir}/tests" />
  </exec>
 </target>

 <target name="phpcs-ci" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format">
  <exec executable="${basedir}/build/tools/phpcs.phar" output="/dev/null">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
   <arg value="--standard=PSR2" />
   <arg value="--extensions=php" />
   <arg value="--ignore=autoload.php" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phpcpd" description="Find duplicate code using PHPCPD">
  <exec executable="${basedir}/build/tools/phpcpd.phar">
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phpcpd-ci" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format">
  <exec executable="${basedir}/build/tools/phpcpd.phar">
   <arg value="--log-pmd" />
   <arg path="${basedir}/build/logs/pmd-cpd.xml" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phpunit" depends="prepare,composer" description="Run unit tests with PHPUnit">
  <exec executable="${basedir}/build/tools/phpunit.phar" failonerror="true">
   <arg value="--configuration"/>
   <arg path="${basedir}/build/phpunit.xml"/>
   <arg value="--testsuite"/>
   <arg value="Unit"/>
   <arg value="--stderr" />
  </exec>
 </target>

 <target name="phpdox" depends="phploc-ci,phpcs-ci,phpmd-ci" description="Generate API documentation using phpDox">
  <exec executable="${basedir}/build/tools/phpdox.phar" dir="${basedir}/build"/>
 </target>

 <target name="Zip" depends="phpdox"  description="Generate zip file">
 <zip destfile="${basedir}/project.zip">
    <fileset dir="${basedir}/app"/>
    <fileset dir="${basedir}/public"/>
    <fileset file="${basedir}/composer.json"/>
    <fileset file="${basedir}/build/tools/composer.phar"/> 
 </zip>
</target>
</project>

